{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aman\\\\Desktop\\\\412Project\\\\MorissetteApp\\\\frontend\\\\src\\\\Components\\\\Checkout.js\";\nimport { emptyCart } from './cartHelpers';\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { createOrder, processPayment, getBraintreeClientToken, isAuthenticated } from './fetchvehicles';\nimport DropIn from 'braintree-web-drop-in-react';\n\nconst Checkout = ({\n  products,\n  setRun = f => f,\n  run = undefined\n}) => {\n  const [data, setData] = useState({\n    loading: false,\n    success: false,\n    clientToken: null,\n    error: '',\n    instance: {},\n    address: ''\n  });\n\n  const customerId = isAuthenticated() && isAuthenticated().customer._id;\n\n  const token = isAuthenticated() && isAuthenticated().token;\n\n  const getToken = (customerId, token) => {\n    getBraintreeClientToken(customerId, token).then(data => {\n      if (data.error) {\n        console.log(data.error);\n        setData({ ...data,\n          error: data.error\n        });\n      } else {\n        console.log(data);\n        setData({\n          clientToken: data.clientToken\n        });\n      }\n    });\n  };\n\n  useEffect(() => {\n    getToken(customerId, token);\n  }, []);\n\n  const handleAddress = event => {\n    setData({ ...data,\n      address: event.target.value\n    });\n  };\n\n  const getTotal = () => {\n    return products.reduce((currentValue, nextValue) => {\n      return currentValue + nextValue.count * nextValue.price;\n    }, 0);\n  };\n\n  const showCheckout = () => {\n    return isAuthenticated() ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }, showDropIn()) : /*#__PURE__*/React.createElement(Link, {\n      to: \"/signin\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    }, \"Sign in to checkout\"));\n  };\n\n  let deliveryAddress = data.address;\n\n  const buy = () => {\n    //   send the nonce to your server\n    // nonce = data.instance.requestPaymentMethod\n    setData({\n      loading: true\n    });\n    let nonce;\n    let getNonce = data.instance.requestPaymentMethod.then(data => {\n      // console.log(\"buy data\", data);\n      nonce = data.nonce; // once you have nonce (card type, card number, etc) send nonce as 'paymentMethodNonce' to backend\n      // and total to be chared\n      // console.log(\n      //   \"send nonce and total to process\",\n      //   nonce,\n      //   getTotal(products)\n      // );\n\n      const paymentData = {\n        paymentMethodNonce: nonce,\n        amount: getTotal(products)\n      };\n      processPayment(customerId, token, paymentData).then(response => {\n        console.log(response); // create order\n\n        const createOrderData = {\n          products: products,\n          transaction_id: response.transaction.id,\n          amount: response.transaction.amount,\n          address: deliveryAddress\n        };\n        console.log(\"createOrderData\", createOrderData);\n        createOrder(customerId, token, createOrderData).then(response => {\n          emptyCart(() => {\n            setRun(!run);\n            console.log(\"payment success and empty cart\", localStorage);\n            setData({\n              loading: false,\n              success: true\n            });\n          });\n        });\n      }).catch(error => {\n        console.log(error);\n        setData({\n          loading: false\n        });\n      });\n    }).catch(error => {\n      // console.log(\"dropin error: \", error);\n      setData({ ...data,\n        error: error.message\n      });\n    });\n  };\n  /*\r\n      const buy = () => {\r\n          setData({ loading: true });\r\n          // send the nonce to your server\r\n           //let nonce = data.instance.requestPaymentMethod()\r\n          let nonce;\r\n          let getNonce = data.instance\r\n              .requestPaymentMethod()\r\n              .then(data => {\r\n                  // console.log(data);\r\n                  nonce = data.nonce;\r\n                  // once you have nonce (card type, card number) send nonce as 'paymentMethodNonce'\r\n                  // and also total to be charged\r\n                  //console.log( \r\n                  //     \"send nonce and total to process: \",\r\n                  //     nonce,\r\n                  //     getTotal(products)\r\n                 // );\r\n                  const paymentData = {\r\n                      paymentMethodNonce: nonce,\r\n                      amount: getTotal(products)\r\n                  };\r\n  \r\n                  processPayment(customerId, token, paymentData)\r\n                      .then(response => {\r\n                          console.log(response);\r\n                          // empty cart\r\n                          // create order\r\n  \r\n                          const createOrderData = {\r\n                              products: products,\r\n                              transaction_id: response.transaction.id,\r\n                              amount: response.transaction.amount,\r\n                              address: deliveryAddress\r\n                          };\r\n  \r\n                         / createOrder(customerId, token, createOrderData)\r\n                              .then(  response => {\r\n                                  emptyCart(() => {\r\n                                      setRun(!run); // run useEffect in parent Cart\r\n                                      console.log('payment success and empty cart');\r\n                                      setData({\r\n                                          loading: false,\r\n                                          success: true\r\n                                      });\r\n                                  });\r\n                              })\r\n                              .catch(error => {\r\n                                  console.log(error);\r\n                                  setData({ loading: false });\r\n                              });\r\n                      })\r\n                      .catch(error => {\r\n                          console.log(error);\r\n                          setData({ loading: false });\r\n                      });\r\n              })\r\n              .catch(error => {\r\n                  // console.log(\"dropin error: \", error);\r\n                  setData({ ...data, error: error.message });\r\n              });\r\n      };\r\n      */\n\n\n  const showDropIn = () => /*#__PURE__*/React.createElement(\"div\", {\n    onBlur: () => setData({ ...data,\n      error: ''\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, data.clientToken !== null && products.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"gorm-group mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"text-muted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 25\n    }\n  }, \"Delivery address:\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    onChange: handleAddress,\n    className: \"form-control\",\n    value: data.address,\n    placeholder: \"Type your delivery address here...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(DropIn, {\n    options: {\n      authorization: data.clientToken\n      /*paypal: {\r\n          flow: 'vault'\r\n      }*/\n\n    },\n    onInstance: instance => data.instance = instance,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: buy,\n    className: \"btn btn-success btn-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 21\n    }\n  }, \"Pay\")) : null);\n\n  const showError = error => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert alert-danger\",\n    style: {\n      display: error ? '' : 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }\n  }, error);\n\n  const showSuccess = success => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert alert-info\",\n    style: {\n      display: success ? '' : 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 9\n    }\n  }, \"Thanks! Your payment was successful!\");\n\n  const showLoading = loading => loading && /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"text-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 47\n    }\n  }, \"Loading...\");\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }\n  }, \"Total: $\", getTotal()), showLoading(data.loading), showSuccess(data.success), showError(data.error), showCheckout());\n};\n\nexport default Checkout;","map":{"version":3,"sources":["C:/Users/aman/Desktop/412Project/MorissetteApp/frontend/src/Components/Checkout.js"],"names":["emptyCart","React","useState","useEffect","Link","createOrder","processPayment","getBraintreeClientToken","isAuthenticated","DropIn","Checkout","products","setRun","f","run","undefined","data","setData","loading","success","clientToken","error","instance","address","customerId","customer","_id","token","getToken","then","console","log","handleAddress","event","target","value","getTotal","reduce","currentValue","nextValue","count","price","showCheckout","showDropIn","deliveryAddress","buy","nonce","getNonce","requestPaymentMethod","paymentData","paymentMethodNonce","amount","response","createOrderData","transaction_id","transaction","id","localStorage","catch","message","length","authorization","showError","display","showSuccess","showLoading"],"mappings":"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","sourcesContent":["import { emptyCart } from './cartHelpers';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { createOrder,processPayment,getBraintreeClientToken,\r\n    isAuthenticated } from './fetchvehicles';\r\nimport DropIn from 'braintree-web-drop-in-react';\r\n\r\n\r\n\r\nconst Checkout = ({ products, setRun = f => f, run = undefined }) => {\r\n    const [data, setData] = useState({\r\n        loading: false,\r\n        success: false,\r\n        clientToken: null,\r\n        error: '',\r\n        instance: {},\r\n        address: ''\r\n    });\r\n\r\n    const customerId = isAuthenticated() && isAuthenticated().customer._id;\r\n    const token = isAuthenticated() && isAuthenticated().token;\r\n\r\n    const getToken = (customerId, token) => {\r\n        getBraintreeClientToken(customerId, token).then(data => {\r\n            if (data.error) {\r\n                console.log(data.error);\r\n                setData({ ...data, error: data.error });\r\n            } else {\r\n                console.log(data);\r\n                setData({ clientToken: data.clientToken });\r\n            }\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getToken(customerId, token);\r\n    }, []);\r\n\r\n    const handleAddress = event => {\r\n        setData({ ...data, address: event.target.value });\r\n    };\r\n\r\n    const getTotal = () => {\r\n        return products.reduce((currentValue, nextValue) => {\r\n            return currentValue + nextValue.count * nextValue.price;\r\n        }, 0);\r\n    };\r\n\r\n    const showCheckout = () => {\r\n        return isAuthenticated() ? (\r\n            <div>{showDropIn()}</div>\r\n        ) : (\r\n            <Link to=\"/signin\">\r\n                <button className=\"btn btn-primary\">Sign in to checkout</button>\r\n            </Link>\r\n        );\r\n    };\r\n\r\n    let deliveryAddress = data.address;\r\n    const buy = () => {\r\n        //   send the nonce to your server\r\n        // nonce = data.instance.requestPaymentMethod\r\n        setData({ loading: true });\r\n        let nonce;\r\n        let getNonce = data.instance\r\n          .requestPaymentMethod\r\n          .then((data) => {\r\n            // console.log(\"buy data\", data);\r\n            nonce = data.nonce;\r\n            // once you have nonce (card type, card number, etc) send nonce as 'paymentMethodNonce' to backend\r\n            // and total to be chared\r\n            // console.log(\r\n            //   \"send nonce and total to process\",\r\n            //   nonce,\r\n            //   getTotal(products)\r\n            // );\r\n            const paymentData = {\r\n              paymentMethodNonce: nonce,\r\n              amount: getTotal(products),\r\n            };\r\n     \r\n            processPayment(customerId, token, paymentData)\r\n              .then((response) => {\r\n                console.log(response);\r\n     \r\n                // create order\r\n     \r\n                const createOrderData = {\r\n                  products: products,\r\n                  transaction_id: response.transaction.id,\r\n                  amount: response.transaction.amount,\r\n                  address: deliveryAddress,\r\n                };\r\n                console.log(\"createOrderData\", createOrderData);\r\n     \r\n                createOrder(customerId, token, createOrderData).then((response) => {\r\n                  emptyCart(() => {\r\n                    setRun(!run);\r\n                    console.log(\"payment success and empty cart\", localStorage);\r\n                    setData({\r\n                      loading: false,\r\n                      success: true,\r\n                    });\r\n                  });\r\n                });\r\n              })\r\n              .catch((error) => {\r\n                console.log(error);\r\n                setData({ loading: false });\r\n              });\r\n          })\r\n          .catch((error) => {\r\n            // console.log(\"dropin error: \", error);\r\n            setData({ ...data, error: error.message });\r\n          });\r\n      };\r\n\r\n/*\r\n    const buy = () => {\r\n        setData({ loading: true });\r\n        // send the nonce to your server\r\n         //let nonce = data.instance.requestPaymentMethod()\r\n        let nonce;\r\n        let getNonce = data.instance\r\n            .requestPaymentMethod()\r\n            .then(data => {\r\n                // console.log(data);\r\n                nonce = data.nonce;\r\n                // once you have nonce (card type, card number) send nonce as 'paymentMethodNonce'\r\n                // and also total to be charged\r\n                //console.log( \r\n                //     \"send nonce and total to process: \",\r\n                //     nonce,\r\n                //     getTotal(products)\r\n               // );\r\n                const paymentData = {\r\n                    paymentMethodNonce: nonce,\r\n                    amount: getTotal(products)\r\n                };\r\n\r\n                processPayment(customerId, token, paymentData)\r\n                    .then(response => {\r\n                        console.log(response);\r\n                        // empty cart\r\n                        // create order\r\n\r\n                        const createOrderData = {\r\n                            products: products,\r\n                            transaction_id: response.transaction.id,\r\n                            amount: response.transaction.amount,\r\n                            address: deliveryAddress\r\n                        };\r\n\r\n                       / createOrder(customerId, token, createOrderData)\r\n                            .then(  response => {\r\n                                emptyCart(() => {\r\n                                    setRun(!run); // run useEffect in parent Cart\r\n                                    console.log('payment success and empty cart');\r\n                                    setData({\r\n                                        loading: false,\r\n                                        success: true\r\n                                    });\r\n                                });\r\n                            })\r\n                            .catch(error => {\r\n                                console.log(error);\r\n                                setData({ loading: false });\r\n                            });\r\n                    })\r\n                    .catch(error => {\r\n                        console.log(error);\r\n                        setData({ loading: false });\r\n                    });\r\n            })\r\n            .catch(error => {\r\n                // console.log(\"dropin error: \", error);\r\n                setData({ ...data, error: error.message });\r\n            });\r\n    };\r\n    */\r\n\r\n    const showDropIn = () => (\r\n        <div onBlur={() => setData({ ...data, error: '' })}>\r\n            {data.clientToken !== null && products.length > 0 ? (\r\n                <div>\r\n                    <div className=\"gorm-group mb-3\">\r\n                        <label className=\"text-muted\">Delivery address:</label>\r\n                        <textarea\r\n                            onChange={handleAddress}\r\n                            className=\"form-control\"\r\n                            value={data.address}\r\n                            placeholder=\"Type your delivery address here...\"\r\n                        />\r\n                    </div>\r\n\r\n                    <DropIn\r\n                        options={{\r\n                            authorization: data.clientToken,\r\n                            /*paypal: {\r\n                                flow: 'vault'\r\n                            }*/\r\n                        }}\r\n                        onInstance={instance => (data.instance = instance)}\r\n                    />\r\n                    <button onClick={buy} className=\"btn btn-success btn-block\">\r\n                        Pay\r\n                    </button>\r\n                </div>\r\n            ) : null}\r\n        </div>\r\n    );\r\n\r\n    const showError = error => (\r\n        <div className=\"alert alert-danger\" style={{ display: error ? '' : 'none' }}>\r\n            {error}\r\n        </div>\r\n    );\r\n\r\n    const showSuccess = success => (\r\n        <div className=\"alert alert-info\" style={{ display: success ? '' : 'none' }}>\r\n            Thanks! Your payment was successful!\r\n        </div>\r\n    );\r\n\r\n    const showLoading = loading => loading && <h2 className=\"text-danger\">Loading...</h2>;\r\n\r\n    return (\r\n        <div>\r\n            <h2>Total: ${getTotal()}</h2>\r\n            {showLoading(data.loading)}\r\n            {showSuccess(data.success)}\r\n            {showError(data.error)}\r\n            {showCheckout()}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Checkout;\r\n"]},"metadata":{},"sourceType":"module"}