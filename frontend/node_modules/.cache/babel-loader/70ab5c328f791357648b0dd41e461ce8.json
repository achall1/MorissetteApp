{"ast":null,"code":"export const addItem = (item = [], count = 0, next = f => f) => {\n  let cart = [];\n\n  if (typeof window !== 'undefined') {\n    if (localStorage.getItem('cart')) {\n      cart = JSON.parse(localStorage.getItem('cart'));\n    }\n\n    cart.push({ ...item,\n      count: 1\n    }); // remove duplicates\n    // build an Array from new Set and turn it back into array using Array.from\n    // so that later we can re-map it\n    // new set will only allow unique values in it\n    // so pass the ids of each object/product\n    // If the loop tries to add the same value again, it'll get ignored\n    // ...with the array of ids we got on when first map() was used\n    // run map() on it again and return the actual product from the cart\n\n    cart = Array.from(new Set(cart.map(p => p._id))).map(id => {\n      return cart.find(p => p._id === id);\n    });\n    localStorage.setItem('cart', JSON.stringify(cart));\n    next();\n  }\n};\nexport const itemTotal = () => {\n  if (typeof window !== 'undefined') {\n    if (localStorage.getItem('cart')) {\n      return JSON.parse(localStorage.getItem('cart')).length;\n    }\n  }\n\n  return 0;\n};\nexport const getCart = () => {\n  if (typeof window !== 'undefined') {\n    if (localStorage.getItem('cart')) {\n      return JSON.parse(localStorage.getItem('cart'));\n    }\n  }\n\n  return [];\n};\nexport const updateItem = (productId, count) => {\n  let cart = [];\n\n  if (typeof window !== 'undefined') {\n    if (localStorage.getItem('cart')) {\n      cart = JSON.parse(localStorage.getItem('cart'));\n    }\n\n    cart.map((product, i) => {\n      if (product._id === productId) {\n        cart[i].count = count;\n      }\n    });\n    localStorage.setItem('cart', JSON.stringify(cart));\n  }\n};\nexport const removeItem = productId => {\n  let cart = [];\n\n  if (typeof window !== 'undefined') {\n    if (localStorage.getItem('cart')) {\n      cart = JSON.parse(localStorage.getItem('cart'));\n    }\n\n    cart.map((product, i) => {\n      if (product._id === productId) {\n        cart.splice(i, 1);\n      }\n    });\n    localStorage.setItem('cart', JSON.stringify(cart));\n  }\n\n  return cart;\n};\nexport const emptyCart = next => {\n  if (typeof window !== 'undefined') {\n    localStorage.removeItem('cart');\n    next();\n  }\n};","map":{"version":3,"sources":["C:/Users/Philip/Documents/GitHub/MorissetteApp/frontend/src/Components/cartHelpers.js"],"names":["addItem","item","count","next","f","cart","window","localStorage","getItem","JSON","parse","push","Array","from","Set","map","p","_id","id","find","setItem","stringify","itemTotal","length","getCart","updateItem","productId","product","i","removeItem","splice","emptyCart"],"mappings":"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","sourcesContent":["export const addItem = (item = [], count = 0, next = f => f) => {\r\n    let cart = [];\r\n    if (typeof window !== 'undefined') {\r\n        if (localStorage.getItem('cart')) {\r\n            cart = JSON.parse(localStorage.getItem('cart'));\r\n        }\r\n        cart.push({\r\n            ...item,\r\n            count: 1\r\n        });\r\n\r\n        // remove duplicates\r\n        // build an Array from new Set and turn it back into array using Array.from\r\n        // so that later we can re-map it\r\n        // new set will only allow unique values in it\r\n        // so pass the ids of each object/product\r\n        // If the loop tries to add the same value again, it'll get ignored\r\n        // ...with the array of ids we got on when first map() was used\r\n        // run map() on it again and return the actual product from the cart\r\n\r\n        cart = Array.from(new Set(cart.map(p => p._id))).map(id => {\r\n            return cart.find(p => p._id === id);\r\n        });\r\n\r\n        localStorage.setItem('cart', JSON.stringify(cart));\r\n        next();\r\n    }\r\n};\r\n\r\nexport const itemTotal = () => {\r\n    if (typeof window !== 'undefined') {\r\n        if (localStorage.getItem('cart')) {\r\n            return JSON.parse(localStorage.getItem('cart')).length;\r\n        }\r\n    }\r\n    return 0;\r\n};\r\n\r\nexport const getCart = () => {\r\n    if (typeof window !== 'undefined') {\r\n        if (localStorage.getItem('cart')) {\r\n            return JSON.parse(localStorage.getItem('cart'));\r\n        }\r\n    }\r\n    return [];\r\n};\r\n\r\nexport const updateItem = (productId, count) => {\r\n    let cart = [];\r\n    if (typeof window !== 'undefined') {\r\n        if (localStorage.getItem('cart')) {\r\n            cart = JSON.parse(localStorage.getItem('cart'));\r\n        }\r\n\r\n        cart.map((product, i) => {\r\n            if (product._id === productId) {\r\n                cart[i].count = count;\r\n            }\r\n        });\r\n\r\n        localStorage.setItem('cart', JSON.stringify(cart));\r\n    }\r\n};\r\n\r\nexport const removeItem = productId => {\r\n    let cart = [];\r\n    if (typeof window !== 'undefined') {\r\n        if (localStorage.getItem('cart')) {\r\n            cart = JSON.parse(localStorage.getItem('cart'));\r\n        }\r\n\r\n        cart.map((product, i) => {\r\n            if (product._id === productId) {\r\n                cart.splice(i, 1);\r\n            }\r\n        });\r\n\r\n        localStorage.setItem('cart', JSON.stringify(cart));\r\n    }\r\n    return cart;\r\n};\r\n\r\nexport const emptyCart = next => {\r\n    if (typeof window !== 'undefined') {\r\n        localStorage.removeItem('cart');\r\n        next();\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}